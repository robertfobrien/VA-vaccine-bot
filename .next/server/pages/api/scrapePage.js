module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pages/api/scrapePage.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./pages/api/scrapePage.js":
/*!*********************************!*\
  !*** ./pages/api/scrapePage.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next */ \"next\");\n/* harmony import */ var next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst puppeteer = __webpack_require__(/*! puppeteer */ \"puppeteer\");\n\nconst ig = __webpack_require__(/*! instagram-scraping */ \"instagram-scraping\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((req, res) => {\n  (async () => {\n    console.log('####################################################################################################################');\n    console.log(\"{\");\n    console.log(\"type: '\" + \"name\" + \"',\");\n    console.log(\"name: '\" + req.body.name + \"',\");\n    console.log(\"}\");\n    let browser = await puppeteer.launch({\n      headless: false,\n      args: ['--window-size=1920,1080']\n    }); //turn to FALSE to debug\n\n    let page = await browser.newPage();\n\n    if (req.body.youtubelink != \"\") {\n      await page.goto(req.body.youtubelink + '/about', {\n        waitUntil: 'networkidle2'\n      });\n      let youtubeStats = await page.evaluate(() => {\n        var type, name, description, viewsString, viewsNum, subscriberString, subscriberNum, subscriberPrefix;\n        var nameObj = document.querySelector('#channel-name > div > div');\n        if (nameObj != null) name = nameObj.innerText;\n        var descriptionObj = document.querySelector('#description');\n        if (descriptionObj != null) description = descriptionObj.innerText;\n        var subscriberStringObj = document.querySelector('#subscriber-count');\n\n        if (subscriberStringObj != null) {\n          subscriberString = subscriberStringObj.innerText;\n          subscriberString = subscriberString.slice(0, subscriberString.length - 12);\n          subscriberPrefix = subscriberString.slice(0, subscriberString.length - 1);\n        }\n\n        var endLetterObj = document.querySelector('#subscriber-count');\n\n        if (endLetterObj != null) {\n          var endLetter = document.querySelector('#subscriber-count').innerText.slice(0, document.querySelector('#subscriber-count').innerText.length - 12);\n          endLetter = endLetter.slice(endLetter.length - 1);\n          if (endLetter == \"K\") subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000);else if (endLetter == \"M\") subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000000);else subscriberNum = parseInt(subscriberString);\n        }\n\n        var viewStringObj = document.querySelectorAll('#right-column > yt-formatted-string')[2];\n\n        if (viewStringObj != null) {\n          viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n          viewsString = viewsString.slice(0, viewsString.length - 6);\n          viewsString = viewsString.replace(',', '').replace(',', '').replace(',', '');\n          viewsNum = parseInt(viewsString);\n        }\n\n        var type = 'youtube';\n        return {\n          type,\n          name,\n          description,\n          viewsString,\n          viewsNum,\n          subscriberString,\n          subscriberNum\n        };\n      });\n      console.dir(youtubeStats);\n      await page.goto(req.body.youtubelink, {\n        waitUntil: 'networkidle2'\n      }); //Youtube video arrays and settings:\n\n      var videos = [];\n      const videoHref = await page.evaluate(() => {\n        var hrefs = []; //at max, 6 videos or however many they have, if they have less. \n\n        for (i = 0; i < 6; i++) {\n          if (document.querySelectorAll('a[id=\"video-title\"]')[i] != undefined) hrefs[i] = document.querySelectorAll('a[id=\"video-title\"]')[i].getAttribute('href');else return hrefs;\n        }\n\n        return hrefs;\n      });\n      var videoEmbed = [];\n\n      for (var j = 0; j < videoHref.length; j++) videoEmbed[j] = '<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/' + videoHref[j].slice(9) + '\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>';\n\n      page.setViewport({\n        width: 1280,\n        height: 1400\n      });\n\n      for (var j = 0; j < videoHref.length; j++) {\n        //TODO sometime the waituntil will not do everything we need it to and sometimes cannot see the page yet when searching later. \n        await page.goto('https://www.youtube.com' + videoHref[j], {\n          waitUntil: 'networkidle0'\n        }); //waits for special selector to load\n\n        await page.waitForSelector('span[class=\"view-count style-scope ytd-video-view-count-renderer\"]', {\n          visible: true\n        });\n        await page.waitForSelector('yt-formatted-string[class=\"count-text style-scope ytd-comments-header-renderer\"] > span', {\n          visible: true\n        });\n        let videoStats = await page.evaluate(() => {\n          let videoViews = document.querySelector('span[class=\"view-count style-scope ytd-video-view-count-renderer\"]').innerText;\n          let videoTitle = document.querySelector('h1[class=\"title style-scope ytd-video-primary-info-renderer\"]').innerText;\n          let videoPosted = document.querySelectorAll('yt-formatted-string[class=\"style-scope ytd-video-primary-info-renderer\"]')[1].innerText;\n          let videoLikes = document.querySelectorAll('yt-formatted-string[class=\"style-scope ytd-toggle-button-renderer style-text\"]')[0].getAttribute('aria-label');\n          let videoDislikes = document.querySelectorAll('yt-formatted-string[class=\"style-scope ytd-toggle-button-renderer style-text\"]')[1].getAttribute('aria-label');\n          var videoComments = document.querySelector('yt-formatted-string[class=\"count-text style-scope ytd-comments-header-renderer\"] > span').innerText;\n\n          function stringToNum(str) {\n            if (str == '') return;\n            str = str.slice(0, str.search(\" \"));\n\n            while (str.search(\",\") != -1) str = str.replace(',', '');\n\n            return str;\n          }\n\n          videoViews = parseInt(stringToNum(videoViews));\n          videoLikes = parseInt(stringToNum(videoLikes));\n          videoDislikes = parseInt(stringToNum(videoDislikes));\n          videoPosted = new Date(\"\" + videoPosted + ' 00:00:00');\n          videoComments = parseInt(stringToNum(videoComments));\n          return {\n            \"title\": videoTitle,\n            \"views\": videoViews,\n            \"posted\": videoPosted.toString(),\n            //this is a Date object, so it will show up as a {} when it prints out\n            \"likes\": videoLikes,\n            \"dislikes\": videoDislikes,\n            \"comments\": videoComments\n          };\n        });\n        const href = videoHref[j],\n              embed = videoEmbed[j];\n        videos[j] = {\n          videoStats,\n          href,\n          embed\n        };\n        console.log(videos[j]);\n      }\n\n      console.dir(videos);\n    } //end of youtube scrape\n\n\n    if (req.body.instagramlink != \"\") {\n      const positionOfUser = req.body.instagramlink.search('.com/');\n      var instaUser = req.body.instagramlink;\n\n      if (positionOfUser != -1) {\n        instaUser = req.body.instagramlink.slice(positionOfUser + 5);\n        const positionOfSlash = instaUser.search('/');\n        instaUser = instaUser.slice(0, positionOfSlash);\n      }\n\n      ig.scrapeUserPage(instaUser).then(result => {\n        console.dir(result);\n      });\n    } //end of instafram scrape\n\n\n    if (req.body.facebooklink != \"\") {\n      //   '/pg/' ensures that the link goes to a page, and not a profile.\n      // Any person who's stats matter will be on a page, not a profile. This forces that.\n      await page.goto('https://www.facebook.com/pg/' + req.body.facebooklink.slice(req.body.facebooklink.search('.com/') + 5), {\n        waitUntil: 'networkidle2'\n      });\n      page.setViewport({\n        width: 1280,\n        height: 1400\n      });\n      let facebookStats = await page.evaluate(() => {\n        var type, name, likes, followers, website, category;\n\n        function stringToNum(str) {\n          if (str == '') return;\n          str = str.slice(0, str.search(\" \"));\n\n          while (str.search(\",\") != -1) str = str.replace(',', '');\n\n          return str;\n        } //loads a few more posts\n\n\n        window.scrollTo(0, window.innerHeight * 2); //type\n\n        type = 'facebook'; //name\n\n        name = document.querySelectorAll('title')[0].innerText;\n        name = name.slice(0, name.search(' - ')); //like count ✔️\n\n        var j = 0;\n\n        while (j >= 0) {\n          if (document.querySelectorAll('div > div[class=\"_4bl9\"]')[j] != null && document.querySelectorAll('div > div[class=\"_4bl9\"]')[j].innerText.contains('people like this')) {\n            likes = document.querySelectorAll('div > div[class=\"_4bl9\"]')[j].innerText;\n            j = -2;\n          }\n\n          j++;\n        }\n\n        likes = stringToNum(likes); //follower count ✔️\n\n        j = 0;\n\n        while (j >= 0) {\n          if (document.querySelectorAll('div > div[class=\"_4bl9\"]')[j] != null && document.querySelectorAll('div > div[class=\"_4bl9\"]')[j].innerText.contains('people follow this')) {\n            followers = document.querySelectorAll('div > div[class=\"_4bl9\"]')[j].innerText;\n            j = -2;\n          }\n\n          j++;\n        }\n\n        followers = stringToNum(followers); //website\n\n        j = 0;\n\n        while (j >= 0 && j < 50) {\n          if (document.querySelectorAll('div > div > a')[j].innerText.contains('www.')) {\n            website = document.querySelectorAll('div > div > a')[j].innerText;\n            j = -2;\n          }\n\n          j++;\n        } //category\n\n\n        j = 10;\n\n        while (j >= 0) {\n          if (document.querySelectorAll('div > div > a')[20].hasAttribute('href') && document.querySelectorAll('div > div > a')[j].getAttribute('href').contains('/pages/category/')) {\n            category = document.querySelectorAll('div > div > a')[j].innerText;\n            j = -2;\n          }\n\n          j++;\n        }\n\n        return {\n          type,\n          name,\n          likes,\n          followers,\n          website,\n          category\n        };\n      });\n      console.dir(facebookStats);\n      /**\n       * let postStats = await page.evaluate(() => {\n          var numPosts = 5;\n          var posts = [], postText = [], postMedia = [], postLikes = [], postComments = [], postShares = [];\n          for(i = 0; i < numPosts; i++)\n              {\n              if(document.querySelectorAll('div[class=\"_5va1 _427x')[i] != null)\n                  {\n                  //start of media section \n                  var medias = [];\n                  var photos = [];\n                  var videos = [];\n                  \n                  //gets all the photos from the post until it finds an icon (with width 18)\n                  var j = 0;\n                  while(document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('img')[j].getAttribute('width') != 18)\n                      {\n                          photos[j] = document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('img')[j].getAttribute('src');\n                          j++\n                      }\n                   //logs all the videos in a post till the videos are returning null\n                      j=0;\n                  while(document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('video')[j] != undefined)\n                  {\n                       videos[j] = document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('video')[j].getAttribute('src');\n                       j++\n                  }\n                  j=0;\n                  \n                  medias = [photos, videos];\n                  postmedia[i] = medias; \n                  //end of media searching\n                   \n                  postText[i] = document.querySelectorAll('div[class=\"kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql ii04i59q\"] > div')[i].innerText;\n                  postLikes[i] = document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('span[class=\"gpro0wi8 pcp91wgn\"]')[0].innerText;\n                  postComments[i] = document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('div[class=\"gtad4xkn\"]')[0].innerText;\n                  postShares[i] = document.querySelectorAll('div[class=\"du4w35lb k4urcfbm l9j0dhe7 sjgh65i0\"]')[i].querySelectorAll('div[class=\"gtad4xkn\"]')[1].innerText;\n                   post[i] = {\n                      postText,\n                      postMedia, \n                      postLikes, \n                      postComments,\n                      postShares,\n                      }\n                  }\n              else\n                  posts[i] = null;\n              }\n          var type = 'facebook-posts';\n          return {\n              type,\n              posts,\n          }\n      })\n      console.log(postStats);\n       */\n    } //end of facebook scrape \n\n\n    if (req.body.twitterlink != \"\") {\n      await page.goto(req.body.twitterlink, {\n        waitUntil: 'networkidle2'\n      });\n      page.setViewport({\n        width: 1280,\n        height: 1400\n      });\n      let twitterStats = await page.evaluate(() => {\n        const link = document.URL;\n        const username = link.slice(link.indexOf('.com/') + 5);\n        var type = 'twitter';\n        var followers = document.querySelectorAll('[href=\"/' + username + '/followers\"]')[0].innerText;\n        var following = document.querySelectorAll('[href=\"/' + username + '/following\"]')[0].innerText;\n\n        function strToNum(str) {\n          var numberStr = str.slice(0, str.search(\" \")); //e.x. '23.4K'\n\n          var numPrefix = numberStr.slice(0, numberStr.length - 1);\n          var endLetter = numberStr.slice(numberStr.length - 1); //e.x. 'K'\n\n          if (endLetter == \"K\") return parseInt(parseFloat(numPrefix) * 1000);else if (endLetter == \"M\") return parseInt(parseFloat(numPrefix) * 1000000);else return parseInt(numPrefix);\n        }\n\n        followers = strToNum(followers);\n        following = strToNum(following);\n        return {\n          type,\n          link,\n          username,\n          followers,\n          following\n        };\n      });\n      console.log(twitterStats);\n    } //end of twitter scrape\n\n\n    if (req.body.tiktoklink != \"\") {\n      await page.goto(req.body.tiktoklink, {\n        waitUntil: 'networkidle2'\n      });\n      page.setViewport({\n        width: 1280,\n        height: 1400\n      });\n      let tiktokStats = await page.evaluate(() => {\n        var website = document.querySelectorAll('.share-links')[0].innerText;\n        var followers = document.querySelectorAll('strong[title=\"Followers\"]')[0].innerText;\n        var likes = document.querySelectorAll('strong[title=\"Likes\"]')[0].innerText;\n        var following = document.querySelectorAll('strong[title=\"Following\"]')[0].innerText;\n        var description = document.querySelectorAll('.share-desc')[0].innerText;\n        var username = document.querySelectorAll('.share-title')[0].innerText; //get the tiktokHrefs\n\n        var tiktokHrefs = [];\n\n        for (var i = 0; i < 6; i++) {\n          if (document.querySelectorAll('.video-feed-item')[i] != undefined) tiktokHrefs[i] = document.querySelectorAll('.video-feed-item')[i].querySelectorAll('a')[0].getAttribute('href');else return tiktokHrefs;\n        }\n\n        return {\n          username,\n          followers,\n          following,\n          likes,\n          website,\n          description,\n          tiktokHrefs\n        };\n      });\n      console.log(tiktokStats); //loop goes through each video, retrieves stats. \n\n      var tiktokVideoStats = [];\n\n      for (var i = 0; i < tiktokStats.tiktokHrefs.length; i++) {\n        await page.goto(tiktokStats.tiktokHrefs[i], {\n          waitUntil: 'networkidle2'\n        });\n        let videoStats = page.evaluate(() => {\n          var vidLikes = document.querySelectorAll('[title=\"like\"]')[0].innerText;\n          var vidComments = document.querySelectorAll('[title=\"comment\"]')[0].innerText;\n          var vidShares = document.querySelectorAll('[title=\"share\"]')[0].innerText;\n          var vidCaption = document.querySelectorAll('.tt-video-meta-caption')[0].innerText;\n          var vidMusicLink = document.querySelectorAll('.video-music-wrapper')[0].getAttribute('href');\n          var vidMusicName = document.querySelectorAll('.video-music-wrapper')[0].innerText;\n          return {\n            vidLikes,\n            vidComments,\n            vidShares,\n            vidCaption,\n            vidMusicName,\n            vidMusicLink\n          };\n        });\n        tiktokVideoStats[i] = videoStats;\n      }\n\n      console.log(tiktokVideoStats);\n    } //end of tiktok scrape\n\n\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/scrapePage.js\n");

/***/ }),

/***/ "instagram-scraping":
/*!*************************************!*\
  !*** external "instagram-scraping" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"instagram-scraping\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJpbnN0YWdyYW0tc2NyYXBpbmdcIj83YTJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Imluc3RhZ3JhbS1zY3JhcGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImluc3RhZ3JhbS1zY3JhcGluZ1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///instagram-scraping\n");

/***/ }),

/***/ "next":
/*!***********************!*\
  !*** external "next" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"next\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXh0XCI/ZWQ4YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJuZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///next\n");

/***/ }),

/***/ "puppeteer":
/*!****************************!*\
  !*** external "puppeteer" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"puppeteer\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwdXBwZXRlZXJcIj8wNmZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InB1cHBldGVlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInB1cHBldGVlclwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///puppeteer\n");

/***/ })

/******/ });