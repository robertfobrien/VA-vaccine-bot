{"ast":null,"code":"function subscriberFormat(rawString) {\n  let output = rawString.slice(0, subscribers.length - 12);\n  let endLetter = output.slice(output.length - 1);\n  output = output.slice(0, output.length - 1);\n\n  if (endLetter == 'K' || endLetter == 'k') {\n    return output;\n  } else return 0;\n}\n\nexport default ((req, res) => {\n  const puppeteer = require(\"puppeteer\");\n\n  (async () => {\n    let browser = await puppeteer.launch({\n      headless: true\n    });\n    let page = await browser.newPage();\n    await page.goto(req.body.youtubelink + '/about', {\n      waitUntil: 'networkidle2'\n    });\n    let youtubeStats = await page.evaluate(() => {\n      var name = document.querySelector('#channel-name > div > div').innerText;\n      var description = document.querySelector('#description').innerText;\n      var subscribers = subscribers = document.querySelector('#subscriber-count').innerText;\n      subsribers = subscriberFormat(subscribers);\n      var views = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n      views = views.slice(0, views.length - 6);\n      views = views.replace(',', '');\n      views = views.replace(',', '');\n      var type = 'youtube';\n      return {\n        type,\n        name,\n        description,\n        views,\n        subscribers\n      };\n    });\n    console.log(youtubeStats);\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});","map":{"version":3,"sources":["/Users/robertobrien/Documents/projects/ghost-scraper/pages/api/scrapePage.js"],"names":["subscriberFormat","rawString","output","slice","subscribers","length","endLetter","req","res","puppeteer","require","browser","launch","headless","page","newPage","goto","body","youtubelink","waitUntil","youtubeStats","evaluate","name","document","querySelector","innerText","description","subsribers","views","querySelectorAll","replace","type","console","log","close","status","json","info"],"mappings":"AAEA,SAASA,gBAAT,CAA0BC,SAA1B,EAAoC;AAChC,MAAIC,MAAM,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAkBC,WAAW,CAACC,MAAZ,GAAmB,EAArC,CAAb;AACA,MAAIC,SAAS,GAAGJ,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACG,MAAP,GAAc,CAA3B,CAAhB;AACAH,EAAAA,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBD,MAAM,CAACG,MAAP,GAAc,CAA9B,CAAT;;AACA,MAAGC,SAAS,IAAI,GAAb,IAAoBA,SAAS,IAAI,GAApC,EACI;AACI,WAAOJ,MAAP;AACH,GAHL,MAKC,OAAO,CAAP;AACJ;;AAED,gBAAe,CAACK,GAAD,EAAMC,GAAN,KAAc;AAEzB,QAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,GAAC,YAAY;AACT,QAAIC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,CAAiB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAjB,CAApB;AACA,QAAIC,IAAI,GAAG,MAAMH,OAAO,CAACI,OAAR,EAAjB;AAEA,UAAMD,IAAI,CAACE,IAAL,CAAUT,GAAG,CAACU,IAAJ,CAASC,WAAT,GAAuB,QAAjC,EAA2C;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAA3C,CAAN;AAEA,QAAIC,YAAY,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAc,MAAM;AAEzC,UAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,EAAoDC,SAA/D;AACA,UAAIC,WAAW,GAAGH,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCC,SAAzD;AACA,UAAIrB,WAAW,GAAGA,WAAW,GAAGmB,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,SAA5E;AACAE,MAAAA,UAAU,GAAG3B,gBAAgB,CAACI,WAAD,CAA7B;AAEA,UAAIwB,KAAK,GAAGL,QAAQ,CAACM,gBAAT,CAA0B,qCAA1B,EAAiE,CAAjE,EAAoEJ,SAAhF;AACAG,MAAAA,KAAK,GAAGA,KAAK,CAACzB,KAAN,CAAY,CAAZ,EAAcyB,KAAK,CAACvB,MAAN,GAAa,CAA3B,CAAR;AACAuB,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAF,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACA,UAAIC,IAAI,GAAG,SAAX;AAEA,aAAO;AACHA,QAAAA,IADG;AAEHT,QAAAA,IAFG;AAGHI,QAAAA,WAHG;AAIHE,QAAAA,KAJG;AAKHxB,QAAAA;AALG,OAAP;AAQH,KArBwB,CAAzB;AAuBA4B,IAAAA,OAAO,CAACC,GAAR,CAAYb,YAAZ;AACA,UAAMT,OAAO,CAACuB,KAAR,EAAN;AAEC,GAhCL;;AAmCA1B,EAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,IAAI,EAAE,aAAR;AAAuBf,IAAAA,IAAI,EAAEf,GAAG,CAACU,IAAJ,CAASK;AAAtC,GAArB;AACD,CAxCH","sourcesContent":["\n\nfunction subscriberFormat(rawString){\n    let output = rawString.slice(0,subscribers.length-12);\n    let endLetter = output.slice(output.length-1);\n    output = output.slice(0, output.length-1);\n    if(endLetter == 'K' || endLetter == 'k')\n        {\n            return(output);\n        }\n    else\n     return 0;\n}\n\nexport default (req, res) => {\n\n    const puppeteer = require(\"puppeteer\");\n\n    (async () => { \n        let browser = await puppeteer.launch({headless: true});\n        let page = await browser.newPage(); \n        \n        await page.goto(req.body.youtubelink + '/about', {waitUntil: 'networkidle2'});\n        \n        let youtubeStats = await page.evaluate(() => {\n\n            var name = document.querySelector('#channel-name > div > div').innerText;\n            var description = document.querySelector('#description').innerText;\n            var subscribers = subscribers = document.querySelector('#subscriber-count').innerText;\n            subsribers = subscriberFormat(subscribers);\n\n            var views = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n            views = views.slice(0,views.length-6);\n            views = views.replace(',', '');\n            views = views.replace(',', '');\n            var type = 'youtube';\n\n            return {\n                type,\n                name,\n                description,\n                views,\n                subscribers,\n                \n            }\n        })\n\n        console.log(youtubeStats);\n        await browser.close();\n\n        })();\n\n\n    res.status(200).json({ info: 'scrape page', name: req.body.name })\n  }\n  "]},"metadata":{},"sourceType":"module"}