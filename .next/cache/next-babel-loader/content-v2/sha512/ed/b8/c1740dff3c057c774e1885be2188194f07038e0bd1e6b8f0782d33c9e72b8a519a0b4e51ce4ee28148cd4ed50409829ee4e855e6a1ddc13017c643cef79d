{"ast":null,"code":"const puppeteer = require(\"puppeteer\");\n\nconst ig = require('instagram-scraping');\n\nexport default ((req, res) => {\n  (async () => {\n    let browser = await puppeteer.launch({\n      headless: true\n    });\n    let page = await browser.newPage();\n\n    if (req.body.youtubelink != \"\") {\n      await page.goto(req.body.youtubelink + '/about', {\n        waitUntil: 'networkidle2'\n      });\n      let youtubeStats = await page.evaluate(() => {\n        var name = document.querySelector('#channel-name > div > div').innerText;\n        var description = document.querySelector('#description').innerText;\n        var subscriberString = document.querySelector('#subscriber-count').innerText;\n        subscriberString = subscriberString.slice(0, subscriberString.length - 12);\n        var endLetter = document.querySelector('#subscriber-count').innerText.slice(0, document.querySelector('#subscriber-count').innerText.length - 12);\n        endLetter = endLetter.slice(endLetter.length - 1);\n        var subscriberPrefix = subscriberString.slice(0, subscriberString.length - 1);\n        if (endLetter == \"K\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000);else if (endLetter == \"M\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000000);else var subscriberNum = parseInt(subscriberString);\n        var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n        viewsString = viewsString.slice(0, viewsString.length - 6);\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        var type = 'youtube';\n        var viewsNum = parseInt(viewsString);\n        return {\n          type,\n          name,\n          description,\n          //viewsString,\n          viewsNum,\n          subscriberString,\n          subscriberNum\n        };\n      });\n      await page.goto(req.body.youtubelink + \"/featured\", {\n        waitUntil: 'networkidle2'\n      });\n      let videoStats = await page.evaluate(() => {\n        var videos = [];\n\n        for (i = 0; i < 10; i++) {\n          videos[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n        }\n\n        var type = 'youtube-videos';\n        return {\n          type,\n          videos\n        };\n      });\n      console.log(youtubeStats);\n      console.log(videoStats);\n    }\n\n    if (req.body.instagramlink != \"\") {\n      // using username for scraping\n      const position = req.body.instagramlink.search('.com/');\n      let instaUser = req.body.instagramlink.slice(position + 5); //26\n\n      const positionOf2 = instaUser.search('/');\n      instaUser = instaUser.slice(0, positionOf2);\n      let instagramStats = ig.scrapeUserPage(instaUser).then(result => {\n        var username = instaUser;\n        var numFollowers = result.user.edge_followed_by.count;\n        var numFollowing = result.user.edge_follow.count;\n        var bio = result.user.biography;\n        var website = result.user.external_url;\n        var posts = [];\n        var numPosts = 0;\n        var fullName = user.full_name;\n        return {\n          fullName,\n          username,\n          numPosts,\n          numFollowers,\n          numFollowing,\n          bio,\n          website,\n          posts\n        };\n      });\n      console.log(instagramStats);\n    }\n\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});","map":{"version":3,"sources":["/Users/robertobrien/Documents/projects/ghost-scraper/pages/api/scrapePage.js"],"names":["puppeteer","require","ig","req","res","browser","launch","headless","page","newPage","body","youtubelink","goto","waitUntil","youtubeStats","evaluate","name","document","querySelector","innerText","description","subscriberString","slice","length","endLetter","subscriberPrefix","subscriberNum","parseInt","parseFloat","viewsString","querySelectorAll","replace","type","viewsNum","videoStats","videos","i","console","log","instagramlink","position","search","instaUser","positionOf2","instagramStats","scrapeUserPage","then","result","username","numFollowers","user","edge_followed_by","count","numFollowing","edge_follow","bio","biography","website","external_url","posts","numPosts","fullName","full_name","close","status","json","info"],"mappings":"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","sourcesContent":["const puppeteer = require(\"puppeteer\");\nconst ig = require('instagram-scraping');\n\nexport default (req, res) => {\n\n    (async () => { \n        let browser = await puppeteer.launch({headless: true});\n        let page = await browser.newPage(); \n\n        if(req.body.youtubelink != \"\")\n        {\n        await page.goto(req.body.youtubelink + '/about', {waitUntil: 'networkidle2'});\n        \n        let youtubeStats = await page.evaluate(() => {\n\n            var name = document.querySelector('#channel-name > div > div').innerText;\n            var description = document.querySelector('#description').innerText;\n            var subscriberString = document.querySelector('#subscriber-count').innerText;\n            subscriberString = subscriberString.slice(0, subscriberString.length-12);\n\n            var endLetter = document.querySelector('#subscriber-count').innerText.slice(0,document.querySelector('#subscriber-count').innerText.length-12);\n            endLetter = endLetter.slice(endLetter.length-1);\n\n            var subscriberPrefix = subscriberString.slice(0,subscriberString.length-1);\n\n            if (endLetter == \"K\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000);\n            else if (endLetter == \"M\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000000);\n            else \n                var subscriberNum = parseInt(subscriberString);\n\n\n            var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n            viewsString = viewsString.slice(0,viewsString.length-6);\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            var type = 'youtube';\n\n            var viewsNum = parseInt(viewsString);\n\n            return {\n                type,\n                name,\n                description,\n                //viewsString,\n                viewsNum,\n                subscriberString,\n                subscriberNum,\n            }\n        })\n\n        await page.goto(req.body.youtubelink + \"/featured\", {waitUntil: 'networkidle2'});\n\n        let videoStats = await page.evaluate(() => {\n            var videos = [];\n            for(i = 0; i < 10; i++)\n                {\n                videos[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n                }\n            var type = 'youtube-videos';\n            return {\n                type,\n                videos,\n            }\n        })\n\n        console.log(youtubeStats);\n        console.log(videoStats);\n        }\n\n    if(req.body.instagramlink != \"\")\n    {    \n        \n        // using username for scraping\n\n        const position = req.body.instagramlink.search('.com/');\n        let instaUser = req.body.instagramlink.slice(position+5); //26\n        const positionOf2 = instaUser.search('/');\n        instaUser = instaUser.slice(0,positionOf2);\n\n        let instagramStats = ig.scrapeUserPage(instaUser).then(result => {\n            var username = instaUser;\n            var numFollowers = result.user.edge_followed_by.count;\n            var numFollowing =  result.user.edge_follow.count;\n            var bio = result.user.biography;\n            var website = result.user.external_url;\n            var posts = [];\n            var numPosts = 0; \n            var fullName = user.full_name;\n            return {\n                fullName,\n                username, \n                numPosts,\n                numFollowers,\n                numFollowing,\n                bio,\n                website,\n                posts,\n            }\n        })\nconsole.log(instagramStats);\n\n\n\n        \n\n        \n    }\n \n        await browser.close();\n\n        })();\n\n\n    res.status(200).json({ info: 'scrape page', name: req.body.name })\n  }\n  "]},"metadata":{},"sourceType":"module"}