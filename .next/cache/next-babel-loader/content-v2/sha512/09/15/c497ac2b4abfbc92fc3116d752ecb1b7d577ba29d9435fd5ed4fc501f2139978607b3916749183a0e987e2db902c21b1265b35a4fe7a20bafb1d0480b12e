{"ast":null,"code":"const puppeteer = require(\"puppeteer\");\n\nconst ig = require('instagram-scraping');\n\nexport default ((req, res) => {\n  (async () => {\n    let browser = await puppeteer.launch({\n      headless: false\n    });\n    console.log('SCRAPING...');\n    let page = await browser.newPage();\n\n    if (req.body.youtubelink != \"\") {\n      await page.goto(req.body.youtubelink + '/about', {\n        waitUntil: 'networkidle2'\n      });\n      let youtubeStats = await page.evaluate(() => {\n        var name = document.querySelector('#channel-name > div > div').innerText;\n        var description = document.querySelector('#description').innerText;\n        var subscriberString = document.querySelector('#subscriber-count').innerText;\n        subscriberString = subscriberString.slice(0, subscriberString.length - 12);\n        var endLetter = document.querySelector('#subscriber-count').innerText.slice(0, document.querySelector('#subscriber-count').innerText.length - 12);\n        endLetter = endLetter.slice(endLetter.length - 1);\n        var subscriberPrefix = subscriberString.slice(0, subscriberString.length - 1);\n        if (endLetter == \"K\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000);else if (endLetter == \"M\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000000);else var subscriberNum = parseInt(subscriberString);\n        var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n        viewsString = viewsString.slice(0, viewsString.length - 6);\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        var type = 'youtube';\n        var viewsNum = parseInt(viewsString);\n        return {\n          type,\n          name,\n          description,\n          //viewsString,\n          viewsNum,\n          subscriberString,\n          subscriberNum\n        };\n      });\n      await page.goto(req.body.youtubelink + \"/featured\", {\n        waitUntil: 'networkidle2'\n      });\n      let videoStats = await page.evaluate(() => {\n        var videos = [];\n\n        for (i = 0; i < 10; i++) {\n          video[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n        }\n\n        var type = 'youtube-videos';\n        return {\n          type,\n          videos\n        };\n      });\n      console.log(youtubeStats);\n      console.log(videoStats);\n    }\n\n    if (req.body.instagramlink != \"\") {\n      // using username for scraping\n      const positionOfUser = req.body.instagramlink.search('.com/');\n      let instaUser = req.body.instagramlink.slice(positionOfUser + 5); //26\n\n      const positionOfSlash = instaUser.search('/');\n      instaUser = instaUser.slice(0, positionOfSlash);\n      var username, numFollowers, numFollowing, bio, website, numPosts, posts, fullName;\n      let instagramStats = ig.scrapeUserPage(instaUser).then(result => {\n        username = instaUser;\n        numFollowers = result.user.edge_followed_by.count;\n        numFollowing = result.user.edge_follow.count;\n        bio = result.user.biography;\n        website = result.user.external_url;\n        posts = [];\n        numPosts = result.total;\n\n        for (var i = 0; i < result.total; i++) {\n          var numLikes = result.medias[i].like_count;\n          var numComments = result.medias[i].comment_count;\n          posts[i] = {\n            numLikes,\n            numComments\n          };\n        }\n\n        fullName = user.full_name;\n        return {\n          fullName,\n          username,\n          numPosts,\n          numFollowers,\n          numFollowing,\n          bio,\n          website,\n          posts\n        };\n      });\n      console.log(instagramStats);\n    }\n\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});","map":{"version":3,"sources":["/Users/robertobrien/Documents/projects/ghost-scraper/pages/api/scrapePage.js"],"names":["puppeteer","require","ig","req","res","browser","launch","headless","console","log","page","newPage","body","youtubelink","goto","waitUntil","youtubeStats","evaluate","name","document","querySelector","innerText","description","subscriberString","slice","length","endLetter","subscriberPrefix","subscriberNum","parseInt","parseFloat","viewsString","querySelectorAll","replace","type","viewsNum","videoStats","videos","i","video","instagramlink","positionOfUser","search","instaUser","positionOfSlash","username","numFollowers","numFollowing","bio","website","numPosts","posts","fullName","instagramStats","scrapeUserPage","then","result","user","edge_followed_by","count","edge_follow","biography","external_url","total","numLikes","medias","like_count","numComments","comment_count","full_name","close","status","json","info"],"mappings":"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","sourcesContent":["const puppeteer = require(\"puppeteer\");\nconst ig = require('instagram-scraping');\n\nexport default (req, res) => {\n\n    (async () => { \n        let browser = await puppeteer.launch({headless: false});\n        console.log('SCRAPING...')\n        let page = await browser.newPage(); \n\n        if(req.body.youtubelink != \"\")\n        {\n        await page.goto(req.body.youtubelink + '/about', {waitUntil: 'networkidle2'});\n        \n        let youtubeStats = await page.evaluate(() => {\n\n            var name = document.querySelector('#channel-name > div > div').innerText;\n            var description = document.querySelector('#description').innerText;\n            var subscriberString = document.querySelector('#subscriber-count').innerText;\n            subscriberString = subscriberString.slice(0, subscriberString.length-12);\n\n            var endLetter = document.querySelector('#subscriber-count').innerText.slice(0,document.querySelector('#subscriber-count').innerText.length-12);\n            endLetter = endLetter.slice(endLetter.length-1);\n\n            var subscriberPrefix = subscriberString.slice(0,subscriberString.length-1);\n\n            if (endLetter == \"K\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000);\n            else if (endLetter == \"M\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000000);\n            else \n                var subscriberNum = parseInt(subscriberString);\n\n\n            var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n            viewsString = viewsString.slice(0,viewsString.length-6);\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            var type = 'youtube';\n\n            var viewsNum = parseInt(viewsString);\n\n            return {\n                type,\n                name,\n                description,\n                //viewsString,\n                viewsNum,\n                subscriberString,\n                subscriberNum,\n            }\n        })\n\n        await page.goto(req.body.youtubelink + \"/featured\", {waitUntil: 'networkidle2'});\n\n        let videoStats = await page.evaluate(() => {\n            var videos = [];\n            for(i = 0; i < 10; i++)\n                {\n                video[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n                }\n            var type = 'youtube-videos';\n            return {\n                type,\n                videos,\n            }\n        })\n\n        console.log(youtubeStats);\n        console.log(videoStats);\n        }\n\n    if(req.body.instagramlink != \"\")\n    {    \n        \n        // using username for scraping\n        const positionOfUser = req.body.instagramlink.search('.com/');\n        let instaUser = req.body.instagramlink.slice(positionOfUser+5); //26\n        const positionOfSlash = instaUser.search('/');\n        instaUser = instaUser.slice(0,positionOfSlash);\n\n        var username, numFollowers, numFollowing, bio, website, numPosts, posts, fullName; \n\n        let instagramStats = ig.scrapeUserPage(instaUser).then(result => {\n            username = instaUser;\n            numFollowers = result.user.edge_followed_by.count;\n            numFollowing =  result.user.edge_follow.count;\n            bio = result.user.biography;\n            website = result.user.external_url;\n            posts = [];\n            numPosts = result.total; \n            for(var i = 0; i < result.total; i++)\n            {\n                var numLikes = result.medias[i].like_count;\n                var numComments = result.medias[i].comment_count;\n                posts[i] = {\n                    numLikes,\n                    numComments,\n                }\n            }\n            fullName = user.full_name;\n\n            return {\n                fullName,\n                username, \n                numPosts,\n                numFollowers,\n                numFollowing,\n                bio,\n                website,\n                posts,\n            }\n        })\n\n        console.log(instagramStats);\n\n\n\n\n        \n\n        \n    }\n \n        await browser.close();\n\n        })();\n\n\n    res.status(200).json({ info: 'scrape page', name: req.body.name })\n  }\n  "]},"metadata":{},"sourceType":"module"}