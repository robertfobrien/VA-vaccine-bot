{"ast":null,"code":"export default ((req, res) => {\n  const puppeteer = require(\"puppeteer\");\n\n  (async () => {\n    let browser = await puppeteer.launch({\n      headless: true\n    });\n    let page = await browser.newPage();\n    await page.goto(req.body.youtubelink + '/about', {\n      waitUntil: 'networkidle2'\n    });\n    let youtubeStats = await page.evaluate(() => {\n      var name = document.querySelector('#channel-name > div > div').innerText;\n      var description = document.querySelector('#description').innerText;\n      var subscribersString = document.querySelector('#subscriber-count').innerText;\n      subscribersString = subscribersString.slice(0, subscribersString.length - 12);\n      var endLetter = document.querySelector('#subscriber-count').innerText.slice(0, document.querySelector('#subscriber-count').innerText.length - 12);\n      endLetter = endLetter.slice(endLetter.length - 1);\n      var subscriberPrefix = subscribersString.slice(0, subscribersString.length - 1);\n      if (endLetter == \"K\") var subscriberCount = parseInt(subscriberPrefix) * 1000;\n      if (endLetter == \"M\") var subscriberCount = parseInt(subscriberPrefix) * 1000000;\n      var views = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n      views = views.slice(0, views.length - 6);\n      views = views.replace(',', '');\n      views = views.replace(',', '');\n      var type = 'youtube';\n      return {\n        type,\n        name,\n        description,\n        views,\n        subscribersString\n      };\n    });\n    console.log(youtubeStats);\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});","map":{"version":3,"sources":["/Users/robertobrien/Documents/projects/ghost-scraper/pages/api/scrapePage.js"],"names":["req","res","puppeteer","require","browser","launch","headless","page","newPage","goto","body","youtubelink","waitUntil","youtubeStats","evaluate","name","document","querySelector","innerText","description","subscribersString","slice","length","endLetter","subscriberPrefix","subscriberCount","parseInt","views","querySelectorAll","replace","type","console","log","close","status","json","info"],"mappings":"AACA,gBAAe,CAACA,GAAD,EAAMC,GAAN,KAAc;AAEzB,QAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,GAAC,YAAY;AACT,QAAIC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,CAAiB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAjB,CAApB;AACA,QAAIC,IAAI,GAAG,MAAMH,OAAO,CAACI,OAAR,EAAjB;AAEA,UAAMD,IAAI,CAACE,IAAL,CAAUT,GAAG,CAACU,IAAJ,CAASC,WAAT,GAAuB,QAAjC,EAA2C;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAA3C,CAAN;AAEA,QAAIC,YAAY,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAc,MAAM;AAEzC,UAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,EAAoDC,SAA/D;AACA,UAAIC,WAAW,GAAGH,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCC,SAAzD;AACA,UAAIE,iBAAiB,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,SAApE;AACAE,MAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,KAAlB,CAAwB,CAAxB,EAA2BD,iBAAiB,CAACE,MAAlB,GAAyB,EAApD,CAApB;AAEA,UAAIC,SAAS,GAAGP,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,SAA5C,CAAsDG,KAAtD,CAA4D,CAA5D,EAA8DL,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,SAA5C,CAAsDI,MAAtD,GAA6D,EAA3H,CAAhB;AACAC,MAAAA,SAAS,GAAGA,SAAS,CAACF,KAAV,CAAgBE,SAAS,CAACD,MAAV,GAAiB,CAAjC,CAAZ;AAEA,UAAIE,gBAAgB,GAAGJ,iBAAiB,CAACC,KAAlB,CAAwB,CAAxB,EAA0BD,iBAAiB,CAACE,MAAlB,GAAyB,CAAnD,CAAvB;AAEA,UAAIC,SAAS,IAAI,GAAjB,EACI,IAAIE,eAAe,GAAGC,QAAQ,CAACF,gBAAD,CAAR,GAA2B,IAAjD;AACJ,UAAID,SAAS,IAAI,GAAjB,EACI,IAAIE,eAAe,GAAGC,QAAQ,CAACF,gBAAD,CAAR,GAA2B,OAAjD;AAIJ,UAAIG,KAAK,GAAGX,QAAQ,CAACY,gBAAT,CAA0B,qCAA1B,EAAiE,CAAjE,EAAoEV,SAAhF;AACAS,MAAAA,KAAK,GAAGA,KAAK,CAACN,KAAN,CAAY,CAAZ,EAAcM,KAAK,CAACL,MAAN,GAAa,CAA3B,CAAR;AACAK,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAF,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACA,UAAIC,IAAI,GAAG,SAAX;AAEA,aAAO;AACHA,QAAAA,IADG;AAEHf,QAAAA,IAFG;AAGHI,QAAAA,WAHG;AAIHQ,QAAAA,KAJG;AAKHP,QAAAA;AALG,OAAP;AAOH,KAhCwB,CAAzB;AAkCAW,IAAAA,OAAO,CAACC,GAAR,CAAYnB,YAAZ;AACA,UAAMT,OAAO,CAAC6B,KAAR,EAAN;AAEC,GA3CL;;AA8CAhC,EAAAA,GAAG,CAACiC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,IAAI,EAAE,aAAR;AAAuBrB,IAAAA,IAAI,EAAEf,GAAG,CAACU,IAAJ,CAASK;AAAtC,GAArB;AACD,CAnDH","sourcesContent":["\nexport default (req, res) => {\n\n    const puppeteer = require(\"puppeteer\");\n\n    (async () => { \n        let browser = await puppeteer.launch({headless: true});\n        let page = await browser.newPage(); \n        \n        await page.goto(req.body.youtubelink + '/about', {waitUntil: 'networkidle2'});\n        \n        let youtubeStats = await page.evaluate(() => {\n\n            var name = document.querySelector('#channel-name > div > div').innerText;\n            var description = document.querySelector('#description').innerText;\n            var subscribersString = document.querySelector('#subscriber-count').innerText;\n            subscribersString = subscribersString.slice(0, subscribersString.length-12);\n\n            var endLetter = document.querySelector('#subscriber-count').innerText.slice(0,document.querySelector('#subscriber-count').innerText.length-12);\n            endLetter = endLetter.slice(endLetter.length-1);\n\n            var subscriberPrefix = subscribersString.slice(0,subscribersString.length-1);\n\n            if (endLetter == \"K\")\n                var subscriberCount = parseInt(subscriberPrefix)*1000;\n            if (endLetter == \"M\")\n                var subscriberCount = parseInt(subscriberPrefix)*1000000;\n\n\n\n            var views = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n            views = views.slice(0,views.length-6);\n            views = views.replace(',', '');\n            views = views.replace(',', '');\n            var type = 'youtube';\n\n            return {\n                type,\n                name,\n                description,\n                views,\n                subscribersString,\n            }\n        })\n\n        console.log(youtubeStats);\n        await browser.close();\n\n        })();\n\n\n    res.status(200).json({ info: 'scrape page', name: req.body.name })\n  }\n  "]},"metadata":{},"sourceType":"module"}