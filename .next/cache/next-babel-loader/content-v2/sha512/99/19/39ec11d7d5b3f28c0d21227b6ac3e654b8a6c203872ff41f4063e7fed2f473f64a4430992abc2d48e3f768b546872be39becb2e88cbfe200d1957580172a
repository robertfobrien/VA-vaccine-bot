{"ast":null,"code":"const puppeteer = require(\"puppeteer\");\n\nconst ig = require('instagram-scraping');\n\nexport default ((req, res) => {\n  (async () => {\n    console.log(\"{\");\n    console.log(\"type: '\" + \"name\" + \"',\");\n    console.log(\"name: '\" + req.body.name + \"',\");\n    console.log(\"}\");\n    let browser = await puppeteer.launch({\n      headless: true\n    }); //turn to FALSE to debug\n\n    console.log('SCRAPING...');\n    let page = await browser.newPage();\n\n    if (req.body.youtubelink != \"\") {\n      await page.goto(req.body.youtubelink + '/about', {\n        waitUntil: 'networkidle2'\n      });\n      let youtubeStats = await page.evaluate(() => {\n        var name = document.querySelector('#channel-name > div > div').innerText;\n        var description = document.querySelector('#description').innerText;\n        var subscriberString = document.querySelector('#subscriber-count').innerText;\n        subscriberString = subscriberString.slice(0, subscriberString.length - 12);\n        var endLetter = document.querySelector('#subscriber-count').innerText.slice(0, document.querySelector('#subscriber-count').innerText.length - 12);\n        endLetter = endLetter.slice(endLetter.length - 1);\n        var subscriberPrefix = subscriberString.slice(0, subscriberString.length - 1);\n        if (endLetter == \"K\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000);else if (endLetter == \"M\") var subscriberNum = parseInt(parseFloat(subscriberPrefix) * 1000000);else var subscriberNum = parseInt(subscriberString);\n        var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n        viewsString = viewsString.slice(0, viewsString.length - 6);\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        viewsString = viewsString.replace(',', '');\n        var type = 'youtube';\n        var viewsNum = parseInt(viewsString);\n        return {\n          type,\n          name,\n          description,\n          //viewsString,\n          viewsNum,\n          subscriberString,\n          subscriberNum\n        };\n      });\n      await page.goto(req.body.youtubelink + \"/featured\", {\n        waitUntil: 'networkidle2'\n      });\n      let videoStats = await page.evaluate(() => {\n        var videos = [];\n\n        for (i = 0; i < 10; i++) {\n          videos[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n        }\n\n        var type = 'youtube-videos';\n        return {\n          type,\n          videos\n        };\n      });\n      console.log(youtubeStats);\n      console.log(videoStats);\n    }\n\n    if (req.body.instagramlink != \"\") {\n      // using username for scraping\n      //cuts out just the username from the link, or just uses the \n      //username if its already in that format\n      const positionOfUser = req.body.instagramlink.search('.com/');\n\n      if (positionOfUser != -1) {\n        let instaUser = req.body.instagramlink.slice(positionOfUser + 5);\n        const positionOfSlash = instaUser.search('/');\n        instaUser = instaUser.slice(0, positionOfSlash);\n      }\n\n      var username, numFollowers, numFollowing, bio, website, numPosts, posts, fullName;\n      var rawObject = ig.scrapeUserPage(instaUser).then(result => {\n        username = instaUser;\n        numFollowers = result.user.edge_followed_by.count;\n        numFollowing = result.user.edge_follow.count;\n        bio = result.user.biography;\n        website = result.user.external_url;\n        posts = [];\n        numPosts = result.total;\n\n        for (var i = 0; i < result.total; i++) {\n          var numLikes = result.medias[i].like_count;\n          var numComments = result.medias[i].comment_count;\n          posts[i] = {\n            numLikes,\n            numComments\n          };\n        }\n\n        fullName = user.full_name;\n      });\n      const instagramStats = {\n        \"type\": \"instagram\",\n        \"fullname\": fullName,\n        \"username\": username,\n        \"numposts\": numPosts,\n        \"numFollowers\": numFollowers,\n        \"numFollowing\": numFollowing,\n        \"bio\": bio,\n        \"website\": website,\n        \"posts\": posts\n      };\n      console.log(instagramStats);\n    }\n\n    if (req.body.facebooklink != \"\") {\n      await page.goto(req.body.facebooklink, {\n        waitUntil: 'networkidle2'\n      });\n      let facebookStats = await page.evaluate(() => {\n        var name = document.querySelector('a[class=\"_64-f\"]').innerText;\n        var likes = document.querySelectorAll('div[class=\"_4-u2 _6590 _3xaf _4-u8\"] > div > div > div')[1].innerText;\n        var followers = document.querySelectorAll('div[class=\"_4-u2 _6590 _3xaf _4-u8\"] > div > div')[2].innerText; //var website = document.querySelector('#u_0_q_sb > div').innerText;\n\n        var category = document.querySelectorAll('div[class=\"_4-u2 _u9q _3xaf _4-u8\"] > div ')[3].innerText; //var type = 'facebook';\n        // var url = req.body.facebooklink;\n\n        return {\n          name,\n          likes,\n          followers,\n          category // type,\n          //url,\n\n        };\n      });\n      console.log(facebookStats);\n    }\n\n    await browser.close();\n  })();\n\n  res.status(200).json({\n    info: 'scrape page',\n    name: req.body.name\n  });\n});","map":{"version":3,"sources":["/Users/robertobrien/Documents/projects/ghost-scraper/pages/api/scrapePage.js"],"names":["puppeteer","require","ig","req","res","console","log","body","name","browser","launch","headless","page","newPage","youtubelink","goto","waitUntil","youtubeStats","evaluate","document","querySelector","innerText","description","subscriberString","slice","length","endLetter","subscriberPrefix","subscriberNum","parseInt","parseFloat","viewsString","querySelectorAll","replace","type","viewsNum","videoStats","videos","i","instagramlink","positionOfUser","search","instaUser","positionOfSlash","username","numFollowers","numFollowing","bio","website","numPosts","posts","fullName","rawObject","scrapeUserPage","then","result","user","edge_followed_by","count","edge_follow","biography","external_url","total","numLikes","medias","like_count","numComments","comment_count","full_name","instagramStats","facebooklink","facebookStats","likes","followers","category","close","status","json","info"],"mappings":"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","sourcesContent":["const puppeteer = require(\"puppeteer\");\nconst ig = require('instagram-scraping');\n\nexport default (req, res) => {\n\n    (async () => { \n\n        console.log(\"{\");\n        console.log(\"type: '\" + \"name\" + \"',\");\n        console.log(\"name: '\" + req.body.name + \"',\");\n        console.log(\"}\");\n\n        let browser = await puppeteer.launch({headless: true}); //turn to FALSE to debug\n        console.log('SCRAPING...')\n        let page = await browser.newPage(); \n\n    if(req.body.youtubelink != \"\")\n        {\n        await page.goto(req.body.youtubelink + '/about', {waitUntil: 'networkidle2'});\n        \n        let youtubeStats = await page.evaluate(() => {\n\n            var name = document.querySelector('#channel-name > div > div').innerText;\n            var description = document.querySelector('#description').innerText;\n            var subscriberString = document.querySelector('#subscriber-count').innerText;\n            subscriberString = subscriberString.slice(0, subscriberString.length-12);\n\n            var endLetter = document.querySelector('#subscriber-count').innerText.slice(0,document.querySelector('#subscriber-count').innerText.length-12);\n            endLetter = endLetter.slice(endLetter.length-1);\n\n            var subscriberPrefix = subscriberString.slice(0,subscriberString.length-1);\n\n            if (endLetter == \"K\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000);\n            else if (endLetter == \"M\")\n                var subscriberNum = parseInt(parseFloat(subscriberPrefix)*1000000);\n            else \n                var subscriberNum = parseInt(subscriberString);\n\n\n            var viewsString = document.querySelectorAll('#right-column > yt-formatted-string')[2].innerText;\n            viewsString = viewsString.slice(0,viewsString.length-6);\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            viewsString = viewsString.replace(',', '');\n            var type = 'youtube';\n\n            var viewsNum = parseInt(viewsString);\n\n            return {\n                type,\n                name,\n                description,\n                //viewsString,\n                viewsNum,\n                subscriberString,\n                subscriberNum,\n            }\n        })\n\n        await page.goto(req.body.youtubelink + \"/featured\", {waitUntil: 'networkidle2'});\n\n        let videoStats = await page.evaluate(() => {\n            var videos = [];\n            for(i = 0; i < 10; i++)\n                {\n                videos[i] = document.querySelectorAll('#items > ytd-grid-video-renderer')[i].innerText;\n                }\n            var type = 'youtube-videos';\n            return {\n                type,\n                videos,\n            }\n        })\n\n        console.log(youtubeStats);\n        console.log(videoStats);\n        }\n\n    if(req.body.instagramlink != \"\")\n    {    \n        \n        // using username for scraping\n        //cuts out just the username from the link, or just uses the \n        //username if its already in that format\n        const positionOfUser = req.body.instagramlink.search('.com/');\n        if(positionOfUser != -1)\n        {\n            let instaUser = req.body.instagramlink.slice(positionOfUser+5);\n            const positionOfSlash = instaUser.search('/');\n            instaUser = instaUser.slice(0,positionOfSlash);\n        }\n\n        var username, numFollowers, numFollowing, bio, website, numPosts, posts, fullName; \n\n        var rawObject = ig.scrapeUserPage(instaUser).then(result => {\n            username = instaUser;\n            numFollowers = result.user.edge_followed_by.count;\n            numFollowing =  result.user.edge_follow.count;\n            bio = result.user.biography;\n            website = result.user.external_url;\n            posts = [];\n            numPosts = result.total; \n            for(var i = 0; i < result.total; i++)\n            {\n                var numLikes = result.medias[i].like_count;\n                var numComments = result.medias[i].comment_count;\n                posts[i] = {\n                    numLikes,\n                    numComments,\n                }\n            }\n            fullName = user.full_name;\n        })\n\n       const instagramStats = {\n            \"type\":\"instagram\",\n            \"fullname\":fullName,\n            \"username\":username, \n            \"numposts\":numPosts,\n            \"numFollowers\":numFollowers,\n            \"numFollowing\":numFollowing,\n            \"bio\":bio,\n            \"website\":website,\n            \"posts\":posts,\n        }\n\n        console.log(instagramStats);\n    }\n \n    \n    if(req.body.facebooklink != \"\")\n    {    \n        \n        await page.goto(req.body.facebooklink , {waitUntil: 'networkidle2'});\n\n        let facebookStats = await page.evaluate(() => {\n            var name = document.querySelector('a[class=\"_64-f\"]').innerText;\n            var likes = document.querySelectorAll('div[class=\"_4-u2 _6590 _3xaf _4-u8\"] > div > div > div')[1].innerText;\n            var followers = document.querySelectorAll('div[class=\"_4-u2 _6590 _3xaf _4-u8\"] > div > div')[2].innerText;\n            //var website = document.querySelector('#u_0_q_sb > div').innerText;\n            var category = document.querySelectorAll('div[class=\"_4-u2 _u9q _3xaf _4-u8\"] > div ')[3].innerText;\n            //var type = 'facebook';\n           // var url = req.body.facebooklink;\n\n            return {\n                name,\n                likes,\n                followers,\n                category,\n               // type,\n                //url,\n            }\n        })\n\n        console.log(facebookStats);\n}\n\n\n        await browser.close();\n\n        })();\n\n\n    res.status(200).json({ info: 'scrape page', name: req.body.name })\n  }\n  "]},"metadata":{},"sourceType":"module"}